.planbox-wrapper

  .setplanbox-on-plan-page

    .input-and-results{ ng_show: '!list' }
      .faux-input-wrap
        %span.add-new{ ng_show: 'canAddList() && !hoveringList', ng_click: 'setList()' }
          %i.fa.fa-plus-circle
        %input.real-select.guide-name#guide{ name: "guide", type: 'text', placeholder: 'Guide Name', ng_model: 'listQuery', ng_on_enter_key: "setListOnEnter()", ng_class: "{'full-width': !canAddList() || hoveringList}" }
      %ul.suggested-results{ ng_show: 'listOptions().length && listQuery.length > 2 && !hoveringList' }
        %li{ ng_repeat: "currentList in listOptions()", ng_click: 'setList(currentList)' }
          %span.name {{currentList.name}}
          %span.count ({{currentList.place_ids.length}} places)

    .chosen-plan{ ng_show: 'list && !rename' }
      %span.title{ ng_click: 'renameList()' } {{ list.name }}
      %i.fa.fa-times.title{ ng_click: 'resetList()' }
      %i.fa.fa-cog.settings{ ng_click: 'settingsBoxToggle()', ng_class: "{'opened': settingsBoxToggled}" }
    .chosen-plan.above-mask{ ng_show: 'list && rename' }
      %input.title#rename{ ng_model: 'rename', ng_on_enter_key: 'saveRenameList()', ng_on_esc_key: 'cancelRenameList()' }

  .settingsbox-on-plan-page{ ng_show: "list && ( settingsBoxToggled || rename )", ng_class: "{'in-rename': rename}" }
    .plan-settings-dropdown{ ng_show: '!rename' }= render 'header/dropdowns/plan_settings'
    .rename-confirmation{ ng_show: 'rename' }
      .planit-button.gray{ ng_click: 'cancelRenameList()' } Cancel          
      .planit-button.neon{ ng_click: 'saveRenameList()' } Save

  .addbox-wrapper{ ng_show: "userOwnsList && list && !rename && mode != 'trip' && !settingsBoxToggled" }

    .minimize-maximize-addbox{ ng_click: "addBoxToggle()", ng_class: "{'opened': addBoxToggled}" }
      %i.fa{ ng_class: "{'fa-caret-up': addBoxToggled, 'fa-caret-down': !addBoxToggled}" }

    .addbox-on-plan-page{ ng_show: "addBoxToggled" }

      .faux-input-wrap{ ng_show: '!nearby && list' }
        %span.add-new{ ng_show: 'canSetNearby(placeNearby)', ng_click: 'setNearby(placeNearby)' }
          %i.fa.fa-check
        %input.real-select#place-nearby{ name: "place-nearby", type: 'text', placeholder: 'Where? (City or Region)', ng_model: 'placeNearby', ng_show: 'list && !nearby', ng_on_enter_key: 'setNearby(placeNearby)', ng_class: "{'full-width': (!placeNearby || placeNearby.length < 2)}" }

      .input-and-results{ ng_show: 'nearby && list' }
        .faux-input-wrap
          %span.chosen-input#chosen-nearby{ ng_click: 'resetNearby()' }
            %i.fa.fa-times
            {{ nearby }}
          %input.real-input#place-name{ name: "place-name", type: 'text', placeholder: 'What do you want to add in {{ nearby }}?', ng_model: 'placeName', ng_change: 'search()', ng_on_enter_key: "lazyAddItem()", ng_keydown: 'removeTagOnBackspace($event)', ng_on_esc_key: "options = []" }

        %ul.suggested-results{ ng_show: 'options.length>0 && placeName && placeName.length>0' }
          %li.search-results-list{ ng_repeat: 'option in options', ng_click: 'addItem(option)' }
            .bucket-list-tab
              %a{ ng_href: '{{option.href}}', target: '_self' }
                .bucket-list-no-img{ ng_show: "!option.image_url" }
                .bucket-list-img{ ng_show: "option.image_url", style: "background-image: url('{{ option.image_url }}');" }
              .bucket-list-wrap
                .bucket-list-profile
                  %a{ target: '_self' }
                    .bucket-list-title
                      {{ option.names[0] }}
                    .foursquare-and-info-wrap
                      %span.mini-foursquare-icon{ ng_show: "option.foursquare_icon", style: "background-image: url('{{ option.foursquare_icon }}');" }
                      .bucket-list-more-info
                        {{ option.categories.join(', ') }}
                      .bucket-list-more-info.locale-only
                        {{ option.localeDetails() }}